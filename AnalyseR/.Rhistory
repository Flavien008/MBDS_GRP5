install.packages(c("RJDBC", "DBI", "rJava", "odbc"))
library(odbc)
library(DBI)
library(rJava)
library(RJDBC)
hiveDB <- dbConnect(odbc::odbc(), "Hive Driver")
dbGetQuery(hiveDB,"select * from catalogue_ext")
install.packages(c("RJDBC", "DBI", "rJava", "odbc"))
install.packages(c("RJDBC", "DBI", "rJava", "odbc"))
install.packages(c("RJDBC", "DBI", "rJava", "odbc"))
install.packages(c("RJDBC", "DBI", "rJava", "odbc"))
install.packages(c("RJDBC", "DBI", "rJava", "odbc"))
View(hiveDB)
View(hiveDB)
library(odbc)
library(DBI)
library(rJava)
library(RJDBC)
hiveDB <- dbConnect(odbc::odbc(), "Hive Driver")
dbGetQuery(hiveDB,"select * from catalogue_ext")
catalogue <- dbGetQuery(hiveDB, "select
catalogue_ext.id as id,
catalogue_ext.marque as marque,
catalogue_ext.nom as nom,
catalogue_ext.puissance as puissance,
catalogue_ext.longueur as longueur,
catalogue_ext.nbplaces as nbplaces,
catalogue_ext.nbportes as nbportes,
catalogue_ext.couleur as couleur,
catalogue_ext.occasion as occasion,
catalogue_ext.prix as prix
from catalogue_ext")
immatriculation <- dbGetQuery(hiveDB, "select
immatriculation_ext.id as id,
immatriculation_ext.immatriculation as immatriculation,
immatriculation_ext.marque as marque,
immatriculation_ext.nom as nom,
immatriculation_ext.puissance as puissance,
immatriculation_ext.longueur as longueur,
immatriculation_ext.nbplaces as nbplaces,
immatriculation_ext.nbportes as nbportes,
immatriculation_ext.couleur as couleur,
immatriculation_ext.occasion as occasion,
immatriculation_ext.prix as prix
from immatriculation_ext")
immatriculation <- dbGetQuery(hiveDB, "select
immatriculation_ext.id as id,
immatriculation_ext.immatriculation as immatriculation,
immatriculation_ext.marque as marque,
immatriculation_ext.nom as nom,
immatriculation_ext.puissance as puissance,
immatriculation_ext.longueur as longueur,
immatriculation_ext.nbplaces as nbplaces,
immatriculation_ext.nbportes as nbportes,
immatriculation_ext.couleur as couleur,
immatriculation_ext.occasion as occasion,
immatriculation_ext.prix as prix
from immatriculation_ext LIMIT 5000")
nb_lignes_totales <- dbGetQuery(hiveDB, "SELECT COUNT(*) as total FROM immatriculation_ext")$total
taille_lot <- 5000
nb_lots <- ceiling(nb_lignes_totales / taille_lot)
donnees_par_lot <- list()
for (i in 1:nb_lots) {
# Calculer l'offset pour obtenir le prochain lot de données
offset <- (i - 1) * taille_lot
# Requête pour récupérer les données par lot
query <- paste0("SELECT *
FROM immatriculation_ext
LIMIT ", taille_lot, " OFFSET ", offset)
# Récupérer les données
donnees_lot <- dbGetQuery(hiveDB, query)
# Stocker les données dans la liste
donnees_par_lot[[i]] <- donnees_lot
}
for (i in 1:nb_lots) {
# Calculer l'offset pour obtenir le prochain lot de données
offset <- (i - 1) * taille_lot
# Requête pour récupérer les données par lot
query <- paste0("SELECT *
FROM immatriculation_ext
LIMIT ", taille_lot, " OFFSET ", offset)
# Récupérer les données
donnees_lot <- dbGetQuery(hiveDB, query)
# Stocker les données dans la liste
donnees_par_lot[[i]] <- donnees_lot
}
for (i in 1:nb_lots) {
# Calculer l'offset pour obtenir le prochain lot de données
offset <- (i - 1) * taille_lot
# Requête pour récupérer les données par lot
query <- paste0("SELECT *
FROM immatriculation_ext
LIMIT ", taille_lot, " OFFSET ", offset)
# Récupérer les données
donnees_lot <- dbGetQuery(hiveDB, query)
# Stocker les données dans la liste
donnees_par_lot[[i]] <- donnees_lot
}
for (i in 1:nb_lots) {
# Calculer l'offset pour obtenir le prochain lot de données
offset <- (i - 1) * taille_lot
# Requête pour récupérer les données par lot
query <- paste0("SELECT *
FROM immatriculation_ext
LIMIT ", taille_lot, " OFFSET ", offset)
# Récupérer les données
donnees_lot <- dbGetQuery(hiveDB, query)
# Stocker les données dans la liste
donnees_par_lot[[i]] <- donnees_lot
}
immatriculation <- do.call(rbind, donnees_par_lot)
View(immatriculation)
for (i in 1:nb_lots) {
# Calculer l'offset pour obtenir le prochain lot de données
offset <- (i - 1) * taille_lot
# Requête pour récupérer les données par lot
query <- paste0("SELECT *
FROM immatriculation_ext
LIMIT ", taille_lot, " OFFSET ", offset)
# Récupérer les données
donnees_lot <- dbGetQuery(hiveDB, query)
# Stocker les données dans la liste
donnees_par_lot[[i]] <- donnees_lot
}
print(dim(immatriculation))
for (i in 1:nb_lots) {
# Calculer l'offset pour obtenir le prochain lot de données
offset <- (i - 1) * taille_lot
# Requête pour récupérer les données par lot
query <- paste0("SELECT *
FROM immatriculation_ext
LIMIT ", taille_lot, " OFFSET ", offset)
# Récupérer les données
donnees_lot <- dbGetQuery(hiveDB, query)
# Stocker les données dans la liste
donnees_par_lot[[i]] <- donnees_lot
}
for (i in 1:nb_lots) {
# Calculer l'offset pour obtenir le prochain lot de données
offset <- (i - 1) * taille_lot
offset <- as.integer(offset)
# Requête pour récupérer les données par lot
query <- paste0("SELECT *
FROM immatriculation_ext
LIMIT ", taille_lot, " OFFSET ", offset)
# Récupérer les données
donnees_lot <- dbGetQuery(hiveDB, query)
# Stocker les données dans la liste
donnees_par_lot[[i]] <- donnees_lot
}
print(dim(immatriculation))
immatriculation <- do.call(rbind, donnees_par_lot)
print(dim(immatriculation))
taille_lot <- 1000
nb_lots <- ceiling(nb_lignes_totales / taille_lot)
donnees_par_lot <- list()
for (i in 1:nb_lots) {
# Calculer l'offset pour obtenir le prochain lot de données
offset <- (i - 1) * taille_lot
offset <- as.integer(offset)
# Requête pour récupérer les données par lot
query <- paste0("SELECT *
FROM immatriculation_ext
LIMIT ", taille_lot, " OFFSET ", offset)
# Récupérer les données
donnees_lot <- dbGetQuery(hiveDB, query)
# Stocker les données dans la liste
donnees_par_lot[[i]] <- donnees_lot
}
for (i in 1:nb_lots) {
# Calculer l'offset pour obtenir le prochain lot de données
offset <- (i - 1) * taille_lot
offset <- as.integer(offset)
# Requête pour récupérer les données par lot
query <- paste0("SELECT *
FROM immatriculation_ext
LIMIT ", taille_lot, " OFFSET ", offset)
# Récupérer les données
donnees_lot <- dbGetQuery(hiveDB, query)
# Stocker les données dans la liste
donnees_par_lot[[i]] <- donnees_lot
}
