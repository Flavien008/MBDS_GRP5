rpart.plot(tree_rp4, cex = 0.7)
# Application de tree_rp1 à l'ensemble de test
test_rp1 <- predict(tree_rp1, clientsImmat_ET, type = "class")
# Calcul du taux de succès : nombre de succès sur nombre total d'exemples de test
print(taux_rp1 <- nrow(clientsImmat_ET[clientsImmat_ET$categorie == test_rp1, ]) / nrow(clientsImmat_ET))
# Application de tree_rp2 à l'ensemble de test
test_rp2 <- predict(tree_rp2, clientsImmat_ET, type = "class")
# Calcul du taux de succès : nombre de succès sur nombre total d'exemples de test
print(taux_rp2 <- nrow(clientsImmat_ET[clientsImmat_ET$categorie == test_rp2, ]) / nrow(clientsImmat_ET))
# Application de tree_rp3 à l'ensemble de test
test_rp3 <- predict(tree_rp3, clientsImmat_ET, type = "class")
# Calcul du taux de succès : nombre de succès sur nombre total d'exemples de test
print(taux_rp3 <- nrow(clientsImmat_ET[clientsImmat_ET$categorie == test_rp3, ]) / nrow(clientsImmat_ET))
# Sélection des colonnes nécessaires pour l'analyse
clientsImmat <- clientsImmat[, c("longueur", "nbplaces", "nbportes","prix", "categorie")]
clientsImmat$sexe<-as.factor(clientsImmat$sexe)
clientsImmat$situation_familiale<-as.factor(clientsImmat$situation_familiale)
clientsImmat$categorie<-as.factor(clientsImmat$categorie)
clientsImmat$longueur<-as.factor(clientsImmat$longueur)
clientsImmat$couleur<-as.factor(clientsImmat$couleur)
# Préparation des ensembles d'apprentissage et de test
set.seed(123)  # Fixe la graine aléatoire pour la reproductibilité
index <- sample(1:nrow(clientsImmat), 0.7 * nrow(clientsImmat))  # Création des indices aléatoires pour l'ensemble d'apprentissage
clientsImmat_EA <- clientsImmat[index, ]
clientsImmat_ET <- clientsImmat[-index, ]
# Activation des librairies
library(rpart)
library(rpart.plot)
library(C50)
library(tree)
# Affichage de l'aide
? rpart()
# Sélection d'attribut par Coefficient de Gini et effectif minimal d'un nœud de 10
tree_rp1 <- rpart(categorie~., clientsImmat_EA, parms = list(split = "gini"), control = rpart.control(minbucket = 10))
rpart.plot(tree_rp1)
# Sélection d'attribut par Coefficient de Gini et effectif minimal d'un nœud de 5
tree_rp2 <- rpart(categorie~., clientsImmat_EA, parms = list(split = "gini"), control = rpart.control(minbucket = 5))
rpart.plot(tree_rp2, cex = 0.7)
# Sélection d'attribut par Information Gain et effectif minimal d'un nœud de 10
tree_rp3 <- rpart(categorie~., clientsImmat_EA, parms = list(split = "information"), control = rpart.control(minbucket = 10))
rpart.plot(tree_rp3)
# Sélection d'attribut par Information Gain et effectif minimal d'un nœud de 5
tree_rp4 <- rpart(categorie~., clientsImmat_EA, parms = list(split = "information"), control = rpart.control(minbucket = 5))
rpart.plot(tree_rp4, cex = 0.7)
# Application de tree_rp1 à l'ensemble de test
test_rp1 <- predict(tree_rp1, clientsImmat_ET, type = "class")
# Calcul du taux de succès : nombre de succès sur nombre total d'exemples de test
print(taux_rp1 <- nrow(clientsImmat_ET[clientsImmat_ET$categorie == test_rp1, ]) / nrow(clientsImmat_ET))
# Application de tree_rp2 à l'ensemble de test
test_rp2 <- predict(tree_rp2, clientsImmat_ET, type = "class")
# Calcul du taux de succès : nombre de succès sur nombre total d'exemples de test
print(taux_rp2 <- nrow(clientsImmat_ET[clientsImmat_ET$categorie == test_rp2, ]) / nrow(clientsImmat_ET))
# Application de tree_rp3 à l'ensemble de test
test_rp3 <- predict(tree_rp3, clientsImmat_ET, type = "class")
# Calcul du taux de succès : nombre de succès sur nombre total d'exemples de test
print(taux_rp3 <- nrow(clientsImmat_ET[clientsImmat_ET$categorie == test_rp3, ]) / nrow(clientsImmat_ET))
clientsImmat <- merge(x = clients, by = c( "immatriculation"), y = immatrCatalog )
clientsImmat <- unique(clientsImmat)
# Vérifier le nombre d'éléments dans chaque catégorie
print(table(catalogue$categorie))
print(table(immatrCatalog$categorie))
print(table(clientsImmat$categorie))
# Sélection des colonnes nécessaires pour l'analyse
clientsImmat <- clientsImmat[, c("age", "sexe", "taux", "situation_familiale", "nbr_enfant", "voiture_2", "categorie")]
clientsImmat$sexe<-as.factor(clientsImmat$sexe)
clientsImmat$situation_familiale<-as.factor(clientsImmat$situation_familiale)
clientsImmat$categorie<-as.factor(clientsImmat$categorie)
clientsImmat$longueur<-as.factor(clientsImmat$longueur)
clientsImmat$couleur<-as.factor(clientsImmat$couleur)
# Préparation des ensembles d'apprentissage et de test
set.seed(123)  # Fixe la graine aléatoire pour la reproductibilité
index <- sample(1:nrow(clientsImmat), 0.7 * nrow(clientsImmat))  # Création des indices aléatoires pour l'ensemble d'apprentissage
clientsImmat_EA <- clientsImmat[index, ]
clientsImmat_ET <- clientsImmat[-index, ]
# Activation des librairies
library(rpart)
library(rpart.plot)
library(C50)
library(tree)
# Affichage de l'aide
? rpart()
# Sélection d'attribut par Coefficient de Gini et effectif minimal d'un nœud de 10
tree_rp1 <- rpart(categorie~., clientsImmat_EA, parms = list(split = "gini"), control = rpart.control(minbucket = 10))
rpart.plot(tree_rp1)
# Sélection d'attribut par Coefficient de Gini et effectif minimal d'un nœud de 5
tree_rp2 <- rpart(categorie~., clientsImmat_EA, parms = list(split = "gini"), control = rpart.control(minbucket = 5))
rpart.plot(tree_rp2, cex = 0.7)
# Sélection d'attribut par Information Gain et effectif minimal d'un nœud de 10
tree_rp3 <- rpart(categorie~., clientsImmat_EA, parms = list(split = "information"), control = rpart.control(minbucket = 10))
rpart.plot(tree_rp3)
# Sélection d'attribut par Information Gain et effectif minimal d'un nœud de 5
tree_rp4 <- rpart(categorie~., clientsImmat_EA, parms = list(split = "information"), control = rpart.control(minbucket = 5))
rpart.plot(tree_rp4, cex = 0.7)
# Application de tree_rp1 à l'ensemble de test
test_rp1 <- predict(tree_rp1, clientsImmat_ET, type = "class")
# Calcul du taux de succès : nombre de succès sur nombre total d'exemples de test
print(taux_rp1 <- nrow(clientsImmat_ET[clientsImmat_ET$categorie == test_rp1, ]) / nrow(clientsImmat_ET))
# Application de tree_rp2 à l'ensemble de test
test_rp2 <- predict(tree_rp2, clientsImmat_ET, type = "class")
# Calcul du taux de succès : nombre de succès sur nombre total d'exemples de test
print(taux_rp2 <- nrow(clientsImmat_ET[clientsImmat_ET$categorie == test_rp2, ]) / nrow(clientsImmat_ET))
# Application de tree_rp3 à l'ensemble de test
test_rp3 <- predict(tree_rp3, clientsImmat_ET, type = "class")
# Calcul du taux de succès : nombre de succès sur nombre total d'exemples de test
print(taux_rp3 <- nrow(clientsImmat_ET[clientsImmat_ET$categorie == test_rp3, ]) / nrow(clientsImmat_ET))
# Application de tree_rp4 à l'ensemble de test
test_rp4 <- predict(tree_rp4, clientsImmat_ET, type = "class")
# Calcul du taux de succès : nombre de succès sur nombre total d'exemples de test
print(taux_rp4 <- nrow(clientsImmat_ET[clientsImmat_ET$categorie == test_rp4, ]) / nrow(clientsImmat_ET))
# Affichage de l'aide
? C5.0
str(clientsImmat_EA)
summary(clientsImmat_EA)
# Apprentissage avec minCases = 10 et noGlobalPruning = FALSE
tree_C51 <- C5.0(categorie ~ ., data = clientsImmat_EA, control = C5.0Control(minCases = 10, noGlobalPruning = FALSE))
plot(tree_C51)
# Apprentissage avec minCases = 10 et noGlobalPruning = TRUE
tree_C52 <- C5.0(categorie ~ ., data = clientsImmat_EA, control = C5.0Control(minCases = 10, noGlobalPruning = TRUE))
plot(tree_C52)
# Apprentissage avec minCases = 5 et noGlobalPruning = FALSE
tree_C53 <- C5.0(categorie ~ ., data = clientsImmat_EA, control = C5.0Control(minCases = 5, noGlobalPruning = FALSE))
plot(tree_C53)
# Apprentissage avec minCases = 5 et noGlobalPruning = TRUE
tree_C54 <- C5.0(categorie ~ ., data = clientsImmat_EA, control = C5.0Control(minCases = 5, noGlobalPruning = TRUE))
plot(tree_C54)
# Test et taux de succès pour le 1er paramétrage pour C5.0()
test_C51 <- predict(tree_C51, clientsImmat_ET)
print(taux_C51 <- sum(clientsImmat_ET$categorie == test_C51) / nrow(clientsImmat_ET))
clientsImmat <- merge(x = clients, by = c( "immatriculation"), y = immatrCatalog )
clientsImmat <- unique(clientsImmat)
# Vérifier le nombre d'éléments dans chaque catégorie
print(table(catalogue$categorie))
print(table(immatrCatalog$categorie))
print(table(clientsImmat$categorie))
# Sélection des colonnes nécessaires pour l'analyse
clientsImmat <- clientsImmat[, c("age", "sexe", "taux", "situation_familiale", "nbr_enfant", "voiture_2",
"nbplaces", "nbportes", "couleur", "prix", "categorie")]
clientsImmat$sexe<-as.factor(clientsImmat$sexe)
clientsImmat$situation_familiale<-as.factor(clientsImmat$situation_familiale)
clientsImmat$categorie<-as.factor(clientsImmat$categorie)
clientsImmat$longueur<-as.factor(clientsImmat$longueur)
clientsImmat$couleur<-as.factor(clientsImmat$couleur)
# Préparation des ensembles d'apprentissage et de test
set.seed(123)  # Fixe la graine aléatoire pour la reproductibilité
index <- sample(1:nrow(clientsImmat), 0.7 * nrow(clientsImmat))  # Création des indices aléatoires pour l'ensemble d'apprentissage
clientsImmat_EA <- clientsImmat[index, ]
clientsImmat_ET <- clientsImmat[-index, ]
# Activation des librairies
library(rpart)
library(rpart.plot)
library(C50)
library(tree)
# Affichage de l'aide
? rpart()
# Sélection d'attribut par Coefficient de Gini et effectif minimal d'un nœud de 10
tree_rp1 <- rpart(categorie~., clientsImmat_EA, parms = list(split = "gini"), control = rpart.control(minbucket = 10))
rpart.plot(tree_rp1)
# Sélection d'attribut par Coefficient de Gini et effectif minimal d'un nœud de 5
tree_rp2 <- rpart(categorie~., clientsImmat_EA, parms = list(split = "gini"), control = rpart.control(minbucket = 5))
rpart.plot(tree_rp2, cex = 0.7)
# Sélection d'attribut par Information Gain et effectif minimal d'un nœud de 10
tree_rp3 <- rpart(categorie~., clientsImmat_EA, parms = list(split = "information"), control = rpart.control(minbucket = 10))
rpart.plot(tree_rp3)
# Sélection d'attribut par Information Gain et effectif minimal d'un nœud de 5
tree_rp4 <- rpart(categorie~., clientsImmat_EA, parms = list(split = "information"), control = rpart.control(minbucket = 5))
rpart.plot(tree_rp4, cex = 0.7)
# Application de tree_rp1 à l'ensemble de test
test_rp1 <- predict(tree_rp1, clientsImmat_ET, type = "class")
# Calcul du taux de succès : nombre de succès sur nombre total d'exemples de test
print(taux_rp1 <- nrow(clientsImmat_ET[clientsImmat_ET$categorie == test_rp1, ]) / nrow(clientsImmat_ET))
# Application de tree_rp2 à l'ensemble de test
test_rp2 <- predict(tree_rp2, clientsImmat_ET, type = "class")
# Calcul du taux de succès : nombre de succès sur nombre total d'exemples de test
print(taux_rp2 <- nrow(clientsImmat_ET[clientsImmat_ET$categorie == test_rp2, ]) / nrow(clientsImmat_ET))
# Application de tree_rp3 à l'ensemble de test
test_rp3 <- predict(tree_rp3, clientsImmat_ET, type = "class")
# Calcul du taux de succès : nombre de succès sur nombre total d'exemples de test
print(taux_rp3 <- nrow(clientsImmat_ET[clientsImmat_ET$categorie == test_rp3, ]) / nrow(clientsImmat_ET))
# Application de tree_rp4 à l'ensemble de test
test_rp4 <- predict(tree_rp4, clientsImmat_ET, type = "class")
# Calcul du taux de succès : nombre de succès sur nombre total d'exemples de test
print(taux_rp4 <- nrow(clientsImmat_ET[clientsImmat_ET$categorie == test_rp4, ]) / nrow(clientsImmat_ET))
# Affichage de l'aide
? C5.0
str(clientsImmat_EA)
summary(clientsImmat_EA)
# Apprentissage avec minCases = 10 et noGlobalPruning = FALSE
tree_C51 <- C5.0(categorie ~ ., data = clientsImmat_EA, control = C5.0Control(minCases = 10, noGlobalPruning = FALSE))
plot(tree_C51)
# Apprentissage avec minCases = 10 et noGlobalPruning = TRUE
tree_C52 <- C5.0(categorie ~ ., data = clientsImmat_EA, control = C5.0Control(minCases = 10, noGlobalPruning = TRUE))
plot(tree_C52)
# Apprentissage avec minCases = 5 et noGlobalPruning = FALSE
tree_C53 <- C5.0(categorie ~ ., data = clientsImmat_EA, control = C5.0Control(minCases = 5, noGlobalPruning = FALSE))
plot(tree_C53)
# Apprentissage avec minCases = 5 et noGlobalPruning = TRUE
tree_C54 <- C5.0(categorie ~ ., data = clientsImmat_EA, control = C5.0Control(minCases = 5, noGlobalPruning = TRUE))
plot(tree_C54)
# Test et taux de succès pour le 1er paramétrage pour C5.0()
test_C51 <- predict(tree_C51, clientsImmat_ET)
print(taux_C51 <- sum(clientsImmat_ET$categorie == test_C51) / nrow(clientsImmat_ET))
# Test et taux de succès pour le 2nd paramétrage pour C5.0()
test_C52 <- predict(tree_C52, clientsImmat_ET)
print(taux_C52 <- sum(clientsImmat_ET$categorie == test_C52) / nrow(clientsImmat_ET))
# Test et taux de succès pour le 3ème paramétrage pour C5.0()
test_C53 <- predict(tree_C53, clientsImmat_ET)
print(taux_C53 <- sum(clientsImmat_ET$categorie == test_C53) / nrow(clientsImmat_ET))
View(clients)
View(catalogue)
# Inspection initiale des datasets
str(catalogue)
names(catalogue)
summary(catalogue)
str(immatriculation)
names(immatriculation)
summary(immatriculation)
str(co2table)
names(co2table)
summary(co2table)
str(marketing)
names(marketing)
summary(marketing)
str(clients)
names(clients)
summary(clients)
#Visualisation des donnees
install.packages("ggplot2")
library("ggplot2")
# Histogramme des âges des clients
ggplot(clients, aes(x = age)) +
geom_histogram(binwidth = 5, fill = "blue", color = "black") +
labs(title = "Histogramme des âges des clients", x = "Âge", y = "Frequence")
# Barplot des marques de voitures
ggplot(immatriculation,aes(x = marque)) +
geom_bar(fill = "lightblue", color = "black") +
labs(title = "Nombre de voitures par marque", x = "Marque", y = "Nombre de voitures") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Mettre à jour la colonne 'marketing.situation familiale'
marketing$situation_familiale <- tolower(marketing$situation_familiale)
marketing$situation_familiale <- with(marketing, ifelse(situation_familiale =="c�libataire", "celibataire",situation_familiale))
marketing$situation_familiale <- with(marketing, ifelse(situation_familiale =="célibataire", "celibataire",situation_familiale))
# Mettre à jour la colonne 'catalogue.longueur'
catalogue$longueur <- with(catalogue, ifelse(longueur == 'tr�s longue', "tres longue", longueur))
catalogue$longueur <- with(catalogue, ifelse(longueur == 'très longue', "tres longue", longueur))
# Mettre à jour la colonne 'catalogue.marque'
catalogue$marque <- with(catalogue, ifelse(marque == 'Hyunda�', "Hyundai", marque))
# Mettre à jour la colonne 'immatriculation_ext.longueur'
immatriculation$longueur <- with(immatriculation, ifelse(longueur == 'tr�s longue', "tres longue", longueur))
immatriculation$longueur <- with(immatriculation, ifelse(longueur == 'très longue', "tres longue", longueur))
# concernant l'age nous avons des anomalies avec des ages negatifs. Pour corriger cette anomalie nous allons remplacer les ages negatifs par la mediane : 41
clients$age <- with(clients, ifelse(age < 0, 41 ,age))
# de meme pour le taux avec une mediane à 521
clients$taux <- with(clients, ifelse(taux < 0, 521 ,taux))
#pour le sexe du client
# Supprimer les caracteres speciaux
clients$sexe <- gsub("[^A-Za-z]", "", clients$sexe)
# Mettre en majuscules
clients$sexe <- toupper(clients$sexe)
# Supprimer les espaces vides
clients$sexe <- gsub("\\s+", "", clients$sexe)
# Remplacer les valeurs
clients$sexe <- ifelse(clients$sexe %in% c("MASCULIN", "HOMME"), "M", clients$sexe)
clients$sexe <- ifelse(clients$sexe %in% c("FEMININ", "FEMME"), "F", clients$sexe)
clients$sexe <- ifelse(clients$sexe %in% c("FEMININ", "FEMME"), "F", clients$sexe)
summary(clients)
#situation familiale
# Convertir les valeurs à comparer en minuscules
clients$situation_familiale <- tolower(clients$situation_familiale)
# Remplacer les valeurs
clients$situation_familiale <- ifelse(clients$situation_familiale %in% c("c�libataire"), "celibataire", clients$situation_familiale)
clients$situation_familiale <- ifelse(clients$situation_familiale %in% c("mari�(e)"), "marie(e)", clients$situation_familiale)
clients$situation_familiale <- ifelse(clients$situation_familiale %in% c("divorc�e"), "divorce(e)", clients$situation_familiale)
clients$situation_familiale <- ifelse(clients$situation_familiale %in% c("seule", "seul"), "seule", clients$situation_familiale)
clients$situation_familiale <- ifelse(clients$situation_familiale %in% c("célibataire"), "celibataire", clients$situation_familiale)
clients$situation_familiale <- ifelse(clients$situation_familiale %in% c("marié(e)"), "marie(e)", clients$situation_familiale)
clients$situation_familiale <- ifelse(clients$situation_familiale %in% c("divorcée"), "divorce(e)", clients$situation_familiale)
clients$sexe[clients$sexe == ""] <- "ND"
clients$sexe[clients$sexe == "FMININ"] <- "F"
clients$situation_familiale[clients$situation_familiale=="?"] <-"ND"
clients$situation_familiale[clients$situation_familiale==" "] <-"ND"
clients$situation_familiale[clients$situation_familiale=="n/d"] <-"ND"
clients$nbr_enfant[clients$nbr_enfant == -1] <- 0
clients$voiture_2[clients$voiture_2==" "] <- "ND"
clients$voiture_2[clients$voiture_2=="?"] <- "ND"
print(summary(catalogue))
print(skim(catalogue))
library(skimr)
print(summary(catalogue))
print(skim(catalogue))
print(skim(clients))
library(cluster)
definir_categorie_cluster <- function(data) {
# Préparer les données
data_prep <- data[, c("puissance", "longueur", "nbplaces", "nbportes", "malusbonus", "rejetsco2", "coutenergie","prix")]
# Convertir longueur en facteur si ce n'est pas déjà fait
if (!is.factor(data_prep$longueur)) {
data_prep$longueur <- factor(data_prep$longueur)
}
# Normaliser les variables numériques
data_norm <- scale(data_prep[, c("puissance", "nbplaces", "nbportes", "malusbonus", "rejetsco2", "coutenergie","prix")])
# Clustering hiérarchique
hc <- hclust(dist(data_norm), method = "ward.D")
# Découper les clusters en 5 catégories
nb_cluster <- 7
coupes <- cutree(hc, k = nb_cluster)
# Analyser les clusters pour déterminer les caractéristiques dominantes
cluster_analysis <- function(data, clusters) {
analysis <- data.frame(
cluster = 1:nb_cluster,
puissance_moyenne = tapply(data$puissance, clusters, mean),
nbplaces_moyenne = tapply(data$nbplaces, clusters, mean),
nbportes_moyenne = tapply(data$nbportes, clusters, mean),
malusbonus_moyen = tapply(data$malusbonus, clusters, mean),
rejetsco2_moyen = tapply(data$rejetsco2, clusters, mean),
coutenergie_moyen = tapply(data$coutenergie, clusters, mean),
prix_moyen = tapply(data$prix, clusters, mean)
)
return(analysis)
}
cluster_info <- cluster_analysis(data_prep, coupes)
print(cluster_info) # Afficher les informations pour vérification
sorted_puissance <- sort(cluster_info$puissance_moyenne, decreasing = TRUE)
second_max_puissance <- sorted_puissance[2]
# Mapper les clusters aux catégories en fonction des analyses
mapping_clusters_categories <- function(cluster) {
if (cluster_info$puissance_moyenne[cluster] == max(cluster_info$puissance_moyenne)) {
return("sportive")
}else if (cluster_info$prix_moyen[cluster] == max(cluster_info$prix_moyen )) {
return("luxe")
} else if (cluster_info$nbplaces_moyenne[cluster] == max(cluster_info$nbplaces_moyenne)) {
return("familiale")
} else if (cluster_info$puissance_moyenne[cluster] == min(cluster_info$puissance_moyenne)) {
return("citadine")
}else if (cluster_info$rejetsco2_moyen[cluster] == min(cluster_info$rejetsco2_moyen)) {
return("ecologique")
}else if (cluster_info$nbportes_moyenne[cluster] > 3) {
return("confort")
}
print(max(cluster_info$prix_moyen))
}
# Ajouter la colonne "categorie" sans perdre les colonnes existantes
data$categorie <- sapply(coupes, mapping_clusters_categories)
# Renvoyer les données avec la catégorie ajoutée
return(data)
}
# Appliquer la fonction aux
catalogue <- definir_categorie_cluster(catalogue)
View(catalogue)
# Convertir toutes les valeurs de la colonne "marque" en minuscules pour la fusion insensible à la casse
immatriculation$marque <- tolower(immatriculation$marque)
catalogue$marque <- tolower(catalogue$marque)
catalogue$couleur <- tolower(catalogue$couleur)
immatriculation$couleur <- tolower(immatriculation$couleur)
# Fusionner les données
immatrCatalog <- merge(x = immatriculation, by = c( "marque","nom","puissance", "longueur", "nbplaces", "nbportes","couleur", "prix"), y = catalogue )
immatrCatalog <- unique(immatrCatalog)
View(immatrCatalog)
clientsImmat <- merge(x = clients, by = c( "immatriculation"), y = immatrCatalog )
clientsImmat <- unique(clientsImmat)
# Vérifier le nombre d'éléments dans chaque catégorie
print(table(catalogue$categorie))
print(table(immatrCatalog$categorie))
print(table(clientsImmat$categorie))
# Sélection des colonnes nécessaires pour l'analyse
clientsImmat <- clientsImmat[, c("age", "sexe", "taux", "situation_familiale", "nbr_enfant", "voiture_2", "categorie")]
clientsImmat$sexe<-as.factor(clientsImmat$sexe)
clientsImmat$situation_familiale<-as.factor(clientsImmat$situation_familiale)
clientsImmat$categorie<-as.factor(clientsImmat$categorie)
# Préparation des ensembles d'apprentissage et de test
set.seed(123)  # Fixe la graine aléatoire pour la reproductibilité
index <- sample(1:nrow(clientsImmat), 0.7 * nrow(clientsImmat))  # Création des indices aléatoires pour l'ensemble d'apprentissage
clientsImmat_EA <- clientsImmat[index, ]
clientsImmat_ET <- clientsImmat[-index, ]
# Activation des librairies
library(rpart)
library(rpart.plot)
library(C50)
library(tree)
# Affichage de l'aide
? rpart()
# Sélection d'attribut par Coefficient de Gini et effectif minimal d'un nœud de 10
tree_rp1 <- rpart(categorie~., clientsImmat_EA, parms = list(split = "gini"), control = rpart.control(minbucket = 10))
rpart.plot(tree_rp1)
# Sélection d'attribut par Coefficient de Gini et effectif minimal d'un nœud de 5
tree_rp2 <- rpart(categorie~., clientsImmat_EA, parms = list(split = "gini"), control = rpart.control(minbucket = 5))
rpart.plot(tree_rp2, cex = 0.7)
# Sélection d'attribut par Information Gain et effectif minimal d'un nœud de 10
tree_rp3 <- rpart(categorie~., clientsImmat_EA, parms = list(split = "information"), control = rpart.control(minbucket = 10))
rpart.plot(tree_rp3)
# Sélection d'attribut par Information Gain et effectif minimal d'un nœud de 5
tree_rp4 <- rpart(categorie~., clientsImmat_EA, parms = list(split = "information"), control = rpart.control(minbucket = 5))
rpart.plot(tree_rp4, cex = 0.7)
# Application de tree_rp1 à l'ensemble de test
test_rp1 <- predict(tree_rp1, clientsImmat_ET, type = "class")
# Calcul du taux de succès : nombre de succès sur nombre total d'exemples de test
print(taux_rp1 <- nrow(clientsImmat_ET[clientsImmat_ET$categorie == test_rp1, ]) / nrow(clientsImmat_ET))
# Application de tree_rp2 à l'ensemble de test
test_rp2 <- predict(tree_rp2, clientsImmat_ET, type = "class")
# Calcul du taux de succès : nombre de succès sur nombre total d'exemples de test
print(taux_rp2 <- nrow(clientsImmat_ET[clientsImmat_ET$categorie == test_rp2, ]) / nrow(clientsImmat_ET))
# Application de tree_rp3 à l'ensemble de test
test_rp3 <- predict(tree_rp3, clientsImmat_ET, type = "class")
# Calcul du taux de succès : nombre de succès sur nombre total d'exemples de test
print(taux_rp3 <- nrow(clientsImmat_ET[clientsImmat_ET$categorie == test_rp3, ]) / nrow(clientsImmat_ET))
# Application de tree_rp4 à l'ensemble de test
test_rp4 <- predict(tree_rp4, clientsImmat_ET, type = "class")
# Calcul du taux de succès : nombre de succès sur nombre total d'exemples de test
print(taux_rp4 <- nrow(clientsImmat_ET[clientsImmat_ET$categorie == test_rp4, ]) / nrow(clientsImmat_ET))
clientsImmat <- clientsImmat[, c("age", "sexe", "taux", "situation_familiale", "nbr_enfant", "voiture_2", "categorie")]
clientsImmat <- clientsImmat[, c("age", "sexe", "taux", "situation_familiale", "nbr_enfant", "voiture_2", "categorie")]
clientsImmat <- clientsImmat[, c("age", "sexe", "taux", "situation_familiale", "nbr_enfant", "voiture_2", "categorie")]
# Affichage de l'aide
? C5.0
str(clientsImmat_EA)
summary(clientsImmat_EA)
# Apprentissage avec minCases = 10 et noGlobalPruning = FALSE
tree_C51 <- C5.0(categorie ~ ., data = clientsImmat_EA, control = C5.0Control(minCases = 10, noGlobalPruning = FALSE))
plot(tree_C51)
# Apprentissage avec minCases = 10 et noGlobalPruning = TRUE
tree_C52 <- C5.0(categorie ~ ., data = clientsImmat_EA, control = C5.0Control(minCases = 10, noGlobalPruning = TRUE))
plot(tree_C52)
# Apprentissage avec minCases = 5 et noGlobalPruning = FALSE
tree_C53 <- C5.0(categorie ~ ., data = clientsImmat_EA, control = C5.0Control(minCases = 5, noGlobalPruning = FALSE))
plot(tree_C53)
# Apprentissage avec minCases = 5 et noGlobalPruning = TRUE
tree_C54 <- C5.0(categorie ~ ., data = clientsImmat_EA, control = C5.0Control(minCases = 5, noGlobalPruning = TRUE))
plot(tree_C54)
# Test et taux de succès pour le 1er paramétrage pour C5.0()
test_C51 <- predict(tree_C51, clientsImmat_ET)
print(taux_C51 <- sum(clientsImmat_ET$categorie == test_C51) / nrow(clientsImmat_ET))
# Test et taux de succès pour le 2nd paramétrage pour C5.0()
test_C52 <- predict(tree_C52, clientsImmat_ET)
print(taux_C52 <- sum(clientsImmat_ET$categorie == test_C52) / nrow(clientsImmat_ET))
# Test et taux de succès pour le 3ème paramétrage pour C5.0()
test_C53 <- predict(tree_C53, clientsImmat_ET)
print(taux_C53 <- sum(clientsImmat_ET$categorie == test_C53) / nrow(clientsImmat_ET))
# Test et taux de succès pour le 4ème paramétrage pour C5.0()
test_C54 <- predict(tree_C54, clientsImmat_ET)
print(taux_C54 <- sum(clientsImmat_ET$categorie == test_C54) / nrow(clientsImmat_ET))
# Affichage de l'aide
? tree
# Apprentissage avec split = "deviance" et mincut = 10
tree_tr1 <- tree(categorie ~ ., data = clientsImmat_EA, split = "deviance", control = tree.control(nobs = nrow(clientsImmat_EA), mincut = 10))
plot(tree_tr1)
text(tree_tr1, pretty = 0)
# Apprentissage avec split = "deviance" et mincut = 5
tree_tr2 <- tree(categorie ~ ., data = clientsImmat_EA, split = "deviance", control = tree.control(nobs = nrow(clientsImmat_EA), mincut = 5))
plot(tree_tr2)
text(tree_tr2, pretty = 0)
# Apprentissage avec split = "gini" et mincut = 10
tree_tr3 <- tree(categorie ~ ., data = clientsImmat_EA, split = "gini", control = tree.control(nobs = nrow(clientsImmat_EA), mincut = 10))
plot(tree_tr3)
print(skim(clientsImmat))
summary(clientsImmat)
summary(clientsImmat_EA)
print(skim(clientsImmat_EA))
# Apprentissage avec split = "deviance" et mincut = 10
tree_tr1 <- tree(categorie ~ ., data = clientsImmat_EA, split = "deviance", control = tree.control(nobs = nrow(clientsImmat_EA), mincut = 10))
plot(tree_tr1)
text(tree_tr1, pretty = 0)
# Apprentissage avec split = "deviance" et mincut = 5
tree_tr2 <- tree(categorie ~ ., data = clientsImmat_EA, split = "deviance", control = tree.control(nobs = nrow(clientsImmat_EA), mincut = 5))
plot(tree_tr2)
text(tree_tr2, pretty = 0)
# Apprentissage avec split = "gini" et mincut = 10
tree_tr3 <- tree(categorie ~ ., data = clientsImmat_EA, split = "gini", control = tree.control(nobs = nrow(clientsImmat_EA), mincut = 10))
# Apprentissage avec split = "deviance" et mincut = 10
tree_tr1 <- tree(categorie ~ ., data = clientsImmat_EA, split = "deviance", control = tree.control(nrow(clientsImmat_EA), mincut = 10))
plot(tree_tr1)
text(tree_tr1, pretty = 0)
# Apprentissage avec split = "deviance" et mincut = 5
tree_tr2 <- tree(categorie ~ ., data = clientsImmat_EA, split = "deviance", control = tree.control(nrow(clientsImmat_EA), mincut = 5))
plot(tree_tr2)
text(tree_tr2, pretty = 0)
# Apprentissage avec split = "gini" et mincut = 10
tree_tr3 <- tree(categorie ~ ., data = clientsImmat_EA, split = "gini", control = tree.control(nrow(clientsImmat_EA), mincut = 10))
# Vérification des valeurs manquantes
sum(is.na(clientsImmat_EA))
sum(is.na(clientsImmat_ET))
# Suppression des lignes avec des valeurs manquantes
clientsImmat_EA <- na.omit(clientsImmat_EA)
clientsImmat_ET <- na.omit(clientsImmat_ET)
clientsImmat$voiture_2<-as.factor(clientsImmat$voiture_2)
clientsImmat$categorie<-as.factor(clientsImmat$categorie)
# Apprentissage avec split = "deviance" et mincut = 10
tree_tr1 <- tree(categorie ~ ., data = clientsImmat_EA, split = "deviance", control = tree.control(nrow(clientsImmat_EA), mincut = 10))
plot(tree_tr1)
text(tree_tr1, pretty = 0)
# Apprentissage avec split = "deviance" et mincut = 5
tree_tr2 <- tree(categorie ~ ., data = clientsImmat_EA, split = "deviance", control = tree.control(nrow(clientsImmat_EA), mincut = 5))
plot(tree_tr2)
text(tree_tr2, pretty = 0)
# Apprentissage avec split = "gini" et mincut = 10
tree_tr3 <- tree(categorie ~ ., data = clientsImmat_EA, split = "gini", control = tree.control(nrow(clientsImmat_EA), mincut = 10))
plot(tree_tr3)
text(tree_tr3, pretty = 0)
# Apprentissage avec split = "gini" et mincut = 5
tree_tr4 <- tree(categorie ~ ., data = clientsImmat_EA, split = "gini", control = tree.control(nobs = nrow(clientsImmat_EA), mincut = 5))
plot(tree_tr4)
text(tree_tr4, pretty = 0)
# Test et taux de succès pour le 1er paramétrage pour tree()
test_tr1 <- predict(tree_tr1, clientsImmat_ET, type = "class")
print(taux_tr1 <- sum(clientsImmat_ET$categorie == test_tr1) / nrow(clientsImmat_ET))
# Test et taux de succès pour le 2nd paramétrage pour tree()
test_tr2 <- predict(tree_tr2, clientsImmat_ET, type = "class")
print(taux_tr2 <- sum(clientsImmat_ET$categorie == test_tr2) / nrow(clientsImmat_ET))
# Test et taux de succès pour le 3ème paramétrage pour tree()
test_tr3 <- predict(tree_tr3, clientsImmat_ET, type = "class")
print(taux_tr3 <- sum(clientsImmat_ET$categorie == test_tr3) / nrow(clientsImmat_ET))
# Test et taux de succès pour le 4ème paramétrage pour tree()
test_tr4 <- predict(tree_tr4, clientsImmat_ET, type = "class")
print(taux_tr4 <- sum(clientsImmat_ET$categorie == test_tr4) / nrow(clientsImmat_ET))
