names(immatriculation)
summary(immatriculation)
str(immatriculation)
names(immatriculation)
summary(immatriculation)
immatriculation$longueur <- with(immatriculation, ifelse(longueur == 'tr', "très longue", longueur))
str(immatriculation)
immatriculation$longueur <- with(immatriculation, ifelse(longueur == 'tr', "très longue", longueur))
names(immatriculation)
immatriculation$longueur <- with(immatriculation, ifelse(immatriculation_ext.longueur == 'tr', "très longue", immatriculation_ext.longueur))
clientImmat$longueur <- with(clientImmat, ifelse(immatriculation_ext.longueur == 'tr', "très longue", immatriculation_ext.longueur))
clientImmat$longueur <- with(clientImmat, ifelse(immatriculation_ext.longueur == 'tr', "très longue", immatriculation_ext.longueur))
names(clientImmat)
clientImmat$longueur <- with(clientImmat, ifelse(longueur == 'tr', "très longue", longueur))
clientImmat$age <- with(clientImmat, ifelse(age < 0, 41 ,age))
clients$age <- with(clients, ifelse(age < 0, 41 ,age))
clientImmat$taux <- with(clientImmat, ifelse(taux < 0, 521 ,taux))
clients$taux <- with(clients, ifelse(taux < 0, 521 ,taux))
taille_lot <- 3000
nb_lots <- ceiling(nb_lignes_totales / taille_lot)
taille_lot <- 3000
nb_lots <- ceiling(nb_lignes_totales / taille_lot)
donnees_par_lot <- list()
for (i in 1:nb_lots) {
# Calculer l'offset pour obtenir le prochain lot de données
offset <- (i - 1) * taille_lot
offset <- as.integer(offset)
# Requête pour récupérer les données par lot
query <- paste0("select
immatriculation_ext.id as id,
immatriculation_ext.immatriculation as immatriculation,
immatriculation_ext.marque as marque,
immatriculation_ext.nom as nom,
immatriculation_ext.puissance as puissance,
immatriculation_ext.longueur as longueur,
immatriculation_ext.nbplaces as nbplaces,
immatriculation_ext.nbportes as nbportes,
immatriculation_ext.couleur as couleur,
immatriculation_ext.occasion as occasion,
immatriculation_ext.prix as prix
from immatriculation_ext
LIMIT ", taille_lot, " OFFSET ", offset)
# Récupérer les données
donnees_lot <- dbGetQuery(hiveDB, query)
# Stocker les données dans la liste
donnees_par_lot[[i]] <- donnees_lot
# Pause de 5 minutes avant la prochaine itération
Sys.sleep(30)  # 300 secondes équivaut à 5 minutes
}
for (i in 1:nb_lots) {
# Calculer l'offset pour obtenir le prochain lot de données
offset <- (i - 1) * taille_lot
offset <- as.integer(offset)
# Requête pour récupérer les données par lot
query <- paste0("select
immatriculation_ext.id as id,
immatriculation_ext.immatriculation as immatriculation,
immatriculation_ext.marque as marque,
immatriculation_ext.nom as nom,
immatriculation_ext.puissance as puissance,
immatriculation_ext.longueur as longueur,
immatriculation_ext.nbplaces as nbplaces,
immatriculation_ext.nbportes as nbportes,
immatriculation_ext.couleur as couleur,
immatriculation_ext.occasion as occasion,
immatriculation_ext.prix as prix
from immatriculation_ext
LIMIT ", taille_lot, " OFFSET ", offset)
# Récupérer les données
donnees_lot <- dbGetQuery(hiveDB, query)
# Stocker les données dans la liste
donnees_par_lot[[i]] <- donnees_lot
# Pause de 5 minutes avant la prochaine itération
Sys.sleep(30)  # 300 secondes équivaut à 5 minutes
}
catalogue <- dbGetQuery(hiveDB, "select
catalogue_ext.id as id,
catalogue_ext.marque as marque,
catalogue_ext.nom as nom,
catalogue_ext.puissance as puissance,
catalogue_ext.longueur as longueur,
catalogue_ext.nbplaces as nbplaces,
catalogue_ext.nbportes as nbportes,
catalogue_ext.couleur as couleur,
catalogue_ext.occasion as occasion,
catalogue_ext.prix as prix
from catalogue_ext")
hiveDB <- dbConnect(odbc::odbc(), "Hive Driver")
hiveDB <- dbConnect(odbc::odbc(), "Hive Driver")
dbGetQuery(hiveDB,"select * from catalogue_ext")
catalogue <- dbGetQuery(hiveDB, "select
catalogue_ext.id as id,
catalogue_ext.marque as marque,
catalogue_ext.nom as nom,
catalogue_ext.puissance as puissance,
catalogue_ext.longueur as longueur,
catalogue_ext.nbplaces as nbplaces,
catalogue_ext.nbportes as nbportes,
catalogue_ext.couleur as couleur,
catalogue_ext.occasion as occasion,
catalogue_ext.prix as prix
from catalogue_ext")
donnees_par_lot <- list()
for (i in 1:nb_lots) {
# Calculer l'offset pour obtenir le prochain lot de données
offset <- (i - 1) * taille_lot
offset <- as.integer(offset)
# Requête pour récupérer les données par lot
query <- paste0("select
immatriculation_ext.id as id,
immatriculation_ext.immatriculation as immatriculation,
immatriculation_ext.marque as marque,
immatriculation_ext.nom as nom,
immatriculation_ext.puissance as puissance,
immatriculation_ext.longueur as longueur,
immatriculation_ext.nbplaces as nbplaces,
immatriculation_ext.nbportes as nbportes,
immatriculation_ext.couleur as couleur,
immatriculation_ext.occasion as occasion,
immatriculation_ext.prix as prix
from immatriculation_ext
LIMIT ", taille_lot, " OFFSET ", offset)
# Récupérer les données
donnees_lot <- dbGetQuery(hiveDB, query)
# Stocker les données dans la liste
donnees_par_lot[[i]] <- donnees_lot
# Pause de 5 minutes avant la prochaine itération
Sys.sleep(30)  # 300 secondes équivaut à 5 minutes
}
View(donnees_par_lot)
immatriculation <- do.call(rbind, donnees_par_lot)
immatriculation <- dbGetQuery(hiveDB,"select
immatriculation_ext.id as id,
immatriculation_ext.immatriculation as immatriculation,
immatriculation_ext.marque as marque,
immatriculation_ext.nom as nom,
immatriculation_ext.puissance as puissance,
immatriculation_ext.longueur as longueur,
immatriculation_ext.nbplaces as nbplaces,
immatriculation_ext.nbportes as nbportes,
immatriculation_ext.couleur as couleur,
immatriculation_ext.occasion as occasion,
immatriculation_ext.prix as prix
from immatriculation_ext")
immatriculation <- dbGetQuery(hiveDB,"select
immatriculation_ext.id as id,
immatriculation_ext.immatriculation as immatriculation,
immatriculation_ext.marque as marque,
immatriculation_ext.nom as nom,
immatriculation_ext.puissance as puissance,
immatriculation_ext.longueur as longueur,
immatriculation_ext.nbplaces as nbplaces,
immatriculation_ext.nbportes as nbportes,
immatriculation_ext.couleur as couleur,
immatriculation_ext.occasion as occasion,
immatriculation_ext.prix as prix
from immatriculation_ext")
hiveDB <- dbConnect(odbc::odbc(), "Hive Driver")
immatriculation <- dbGetQuery(hiveDB,"select
immatriculation_ext.id as id,
immatriculation_ext.immatriculation as immatriculation,
immatriculation_ext.marque as marque,
immatriculation_ext.nom as nom,
immatriculation_ext.puissance as puissance,
immatriculation_ext.longueur as longueur,
immatriculation_ext.nbplaces as nbplaces,
immatriculation_ext.nbportes as nbportes,
immatriculation_ext.couleur as couleur,
immatriculation_ext.occasion as occasion,
immatriculation_ext.prix as prix
from immatriculation_ext")
immatriculation <- dbGetQuery(hiveDB,"select
immatriculation_ext.id as id,
immatriculation_ext.immatriculation as immatriculation,
immatriculation_ext.marque as marque,
immatriculation_ext.nom as nom,
immatriculation_ext.puissance as puissance,
immatriculation_ext.longueur as longueur,
immatriculation_ext.nbplaces as nbplaces,
immatriculation_ext.nbportes as nbportes,
immatriculation_ext.couleur as couleur,
immatriculation_ext.occasion as occasion,
immatriculation_ext.prix as prix
from immatriculation_ext")
catalogue <- dbGetQuery(hiveDB, "select
catalogue_ext.id as id,
catalogue_ext.marque as marque,
catalogue_ext.nom as nom,
catalogue_ext.puissance as puissance,
catalogue_ext.longueur as longueur,
catalogue_ext.nbplaces as nbplaces,
catalogue_ext.nbportes as nbportes,
catalogue_ext.couleur as couleur,
catalogue_ext.occasion as occasion,
catalogue_ext.prix as prix
from catalogue_ext")
hiveDB <- dbConnect(odbc::odbc(), "Hive Driver")
catalogue <- dbGetQuery(hiveDB, "select
catalogue_ext.id as id,
catalogue_ext.marque as marque,
catalogue_ext.nom as nom,
catalogue_ext.puissance as puissance,
catalogue_ext.longueur as longueur,
catalogue_ext.nbplaces as nbplaces,
catalogue_ext.nbportes as nbportes,
catalogue_ext.couleur as couleur,
catalogue_ext.occasion as occasion,
catalogue_ext.prix as prix
from catalogue_ext")
immatriculation <- dbGetQuery(hiveDB,"select
immatriculation_ext.id as id,
immatriculation_ext.immatriculation as immatriculation,
immatriculation_ext.marque as marque,
immatriculation_ext.nom as nom,
immatriculation_ext.puissance as puissance,
immatriculation_ext.longueur as longueur,
immatriculation_ext.nbplaces as nbplaces,
immatriculation_ext.nbportes as nbportes,
immatriculation_ext.couleur as couleur,
immatriculation_ext.occasion as occasion,
immatriculation_ext.prix as prix
from immatriculation_ext")
co2table <- dbGetQuery(hiveDB, "select
co2_ext.marque as marque,
co2_ext.malusbonus as malusbonus,
co2_ext.rejetsco2 as rejet,
co2_ext.coutenergie as coutenergie
from co2_ext")
marketing <- dbGetQuery(hiveDB, "select
marketing_ext.marketingid as id,
marketing_ext.age as age,
marketing_ext.sexe as sexe,
marketing_ext.taux as taux,
marketing_ext.situation_familiale as situation_familiale,
marketing_ext.nbr_enfant as nbr_enfant,
marketing_ext.voiture_2 as voiture_2
from marketing_ext")
marketing <- dbGetQuery(hiveDB, "select
marketing_ext.marketingid as id,
marketing_ext.age as age,
marketing_ext.sexe as sexe,
marketing_ext.taux as taux,
marketing_ext.situation_familiale as situation_familiale,
marketing_ext.nbr_enfant as nbr_enfant,
marketing_ext.voiture_2 as voiture_2
from marketing_ext")
clients <- dbGetQuery(hiveDB, "select
clients_ext.clientid as id,
clients_ext.age as age,
clients_ext.sexe as sexe,
clients_ext.taux as taux,
clients_ext.situation_familiale as situation_familiale,
clients_ext.nbr_enfant as nbr_enfant,
clients_ext.voiture_2 as voiture_2,
clients_ext.immatriculation as immatriculation
from clients_ext")
clientImmat <- dbGetQuery(hiveDB, "select
clients_ext.clientid as id,
clients_ext.age as age,
clients_ext.sexe as sexe,
clients_ext.taux as taux,
clients_ext.situation_familiale as situation_familiale,
clients_ext.nbr_enfant as nbr_enfant,
clients_ext.voiture_2 as voiture_2,
clients_ext.immatriculation as immatriculation,
immatriculation_ext.marque as marque,
immatriculation_ext.nom as nom,
immatriculation_ext.puissance as puissance,
immatriculation_ext.longueur as longueur,
immatriculation_ext.nbplaces as nbplaces,
immatriculation_ext.nbportes as nbportes,
immatriculation_ext.couleur as couleur,
immatriculation_ext.occasion as occasion,
immatriculation_ext.prix as prix
from clients_ext inner join immatriculation_ext
on clients_ext.immatriculation = immatriculation_ext.immatriculation")
clientImmat <- dbGetQuery(hiveDB, "select
clients_ext.clientid as id,
clients_ext.age as age,
clients_ext.sexe as sexe,
clients_ext.taux as taux,
clients_ext.situation_familiale as situation_familiale,
clients_ext.nbr_enfant as nbr_enfant,
clients_ext.voiture_2 as voiture_2,
clients_ext.immatriculation as immatriculation,
immatriculation_ext.marque as marque,
immatriculation_ext.nom as nom,
immatriculation_ext.puissance as puissance,
immatriculation_ext.longueur as longueur,
immatriculation_ext.nbplaces as nbplaces,
immatriculation_ext.nbportes as nbportes,
immatriculation_ext.couleur as couleur,
immatriculation_ext.occasion as occasion,
immatriculation_ext.prix as prix
from clients_ext inner join immatriculation_ext
on clients_ext.immatriculation = immatriculation_ext.immatriculation")
View(clientImmat)
clientImmat <- dbGetQuery(hiveDB, "select
clients_ext.clientid as id,
clients_ext.age as age,
clients_ext.sexe as sexe,
clients_ext.taux as taux,
clients_ext.situation_familiale as situation_familiale,
clients_ext.nbr_enfant as nbr_enfant,
clients_ext.voiture_2 as voiture_2,
clients_ext.immatriculation as immatriculation,
immatriculation_ext.marque as marque,
immatriculation_ext.nom as nom,
immatriculation_ext.puissance as puissance,
immatriculation_ext.longueur as longueur,
immatriculation_ext.nbplaces as nbplaces,
immatriculation_ext.nbportes as nbportes,
immatriculation_ext.couleur as couleur,
immatriculation_ext.occasion as occasion,
immatriculation_ext.prix as prix
from clients_ext inner join immatriculation_ext
on clients_ext.immatriculation = immatriculation_ext.immatriculation")
immatriculation <- dbGetQuery(hiveDB,"select
immatriculation_ext.id as id,
immatriculation_ext.immatriculation as immatriculation,
immatriculation_ext.marque as marque,
immatriculation_ext.nom as nom,
immatriculation_ext.puissance as puissance,
immatriculation_ext.longueur as longueur,
immatriculation_ext.nbplaces as nbplaces,
immatriculation_ext.nbportes as nbportes,
immatriculation_ext.couleur as couleur,
immatriculation_ext.occasion as occasion,
immatriculation_ext.prix as prix
from immatriculation_ext")
immatriculation <- dbGetQuery(hiveDB,"select
immatriculation_ext.immatriculation as immatriculation,
immatriculation_ext.marque as marque,
immatriculation_ext.nom as nom,
immatriculation_ext.puissance as puissance,
immatriculation_ext.longueur as longueur,
immatriculation_ext.nbplaces as nbplaces,
immatriculation_ext.nbportes as nbportes,
immatriculation_ext.couleur as couleur,
immatriculation_ext.occasion as occasion,
immatriculation_ext.prix as prix
from immatriculation_ext")
clientImmat <- dbGetQuery(hiveDB, "select
clients_ext.clientid as id,
clients_ext.age as age,
clients_ext.sexe as sexe,
clients_ext.taux as taux,
clients_ext.situation_familiale as situation_familiale,
clients_ext.nbr_enfant as nbr_enfant,
clients_ext.voiture_2 as voiture_2,
clients_ext.immatriculation as immatriculation,
immatriculation_ext.marque as marque,
immatriculation_ext.nom as nom,
immatriculation_ext.puissance as puissance,
immatriculation_ext.longueur as longueur,
immatriculation_ext.nbplaces as nbplaces,
immatriculation_ext.nbportes as nbportes,
immatriculation_ext.couleur as couleur,
immatriculation_ext.occasion as occasion,
immatriculation_ext.prix as prix
from clients_ext inner join immatriculation_ext
on clients_ext.immatriculation = immatriculation_ext.immatriculation")
str(catalogue)
names(catalogue)
summary(catalogue)
str(immatriculation)
names(immatriculation)
summary(i
str(co2table)
str(co2table)
names(co2table)
summary(co2table)
str(marketing)
names(marketing)
summary(marketing)
str(clients)
names(clients)
summary(clie
# Vérifier les noms des colonnes
names(immatriculation)
names(immatriculation)
immatriculation$longueur <- with(immatriculation, ifelse(longueur == 'tr', "très longue", longueur))
str(immatriculation)
View(immatriculation)
clientImmat$longueur <- with(clientImmat, ifelse(longueur == 'tr', "très longue", longueur))
clientImmat$longueur <- with(clientImmat, ifelse(longueur == 'tr', "très longue", longueur))
clientImmat$age <- with(clientImmat, ifelse(age < 0, 41 ,age))
clients$age <- with(clients, ifelse(age < 0, 41 ,age))
clientImmat$taux <- with(clientImmat, ifelse(taux < 0, 521 ,taux))
clients$taux <- with(clients, ifelse(taux < 0, 521 ,taux))
clients$taux <- with(clients, ifelse(taux < 0, 521 ,taux))
# Inspection initiale des datasets
datasets <- list(catalogue, immatriculation, co2table, marketing, clients, clientImmat)
# Inspection initiale des datasets
datasets <- list(catalogue, immatriculation, co2table, marketing, clients, clientImmat)
for (data in datasets) {
print(str(data))
print(names(data))
print(summary(data))
}
library(ggplot2)
library(GGally)
library(ggplot2)
library(GGally)
library(GGally)
numeric_vars <- names(immatriculation)[sapply(immatriculation, is.numeric)]
for (var in numeric_vars) {
ggplot(immatriculation, aes_string(var)) +
geom_histogram(binwidth = 30, fill = 'blue', color = 'black') +
ggtitle(paste("Histogram of", var)) +
theme_minimal() +
xlab(var) +
ylab("Frequency") +
print()
}
for (var in numeric_vars) {
ggplot(immatriculation, aes_string(var)) +
geom_histogram(binwidth = 30, fill = 'blue', color = 'black') +
ggtitle(paste("Histogram of", var)) +
theme_minimal() +
xlab(var) +
ylab("Frequency") +
print()
}
for (var in numeric_vars) {
ggplot(immatriculation, aes_string(var)) +
geom_histogram(binwidth = 30, fill = 'blue', color = 'black') +
ggtitle(paste("Histogram of", var)) +
theme_minimal() +
xlab(var) +
ylab("Frequency") +
print()
}
for (var in numeric_vars) {
p <- ggplot(immatriculation, aes_string(var)) +
geom_histogram(binwidth = 30, fill = 'blue', color = 'black') +
ggtitle(paste("Histogram of", var)) +
theme_minimal() +
xlab(var) +
ylab("Frequency")
print(p)
}
for (var in numeric_vars) {
p <- ggplot(immatriculation, aes_string(var)) +
geom_histogram(binwidth = 30, fill = 'blue', color = 'black') +
ggtitle(paste("Histogram of", var)) +
theme_minimal() +
xlab(var) +
ylab("Frequency")
print(p)
}
for (var in numeric_vars) {
p <- ggplot(immatriculation, aes_string(var)) +
geom_histogram(binwidth = 30, fill = 'blue', color = 'black') +
ggtitle(paste("Histogram of", var)) +
theme_minimal() +
xlab(var) +
ylab("Frequency")
print(p)
}
for (var in numeric_vars) {
p <- ggplot(immatriculation, aes_string(var)) +
geom_histogram(binwidth = 30, fill = 'blue', color = 'black') +
ggtitle(paste("Histogram of", var)) +
theme_minimal() +
xlab(var) +
ylab("Frequency")
print(p)
}
for (var in numeric_vars) {
p <- ggplot(immatriculation, aes_string(var)) +
geom_histogram(binwidth = 30, fill = 'blue', color = 'black') +
ggtitle(paste("Histogram of", var)) +
theme_minimal() +
xlab(var) +
ylab("Frequency")
plots[[var]] <- p
}
plots <- list()
plots <- list()
for (var in numeric_vars) {
p <- ggplot(immatriculation, aes_string(var)) +
geom_histogram(binwidth = 30, fill = 'blue', color = 'black') +
ggtitle(paste("Histogram of", var)) +
theme_minimal() +
xlab(var) +
ylab("Frequency")
plots[[var]] <- p
}
# Afficher les graphiques
for (p in plots) {
print(p)
}
library(naniar)
p <- ggplot(immatriculation, aes_string(var)) +
geom_histogram(binwidth = 30, fill = 'blue', color = 'black') +
ggtitle(paste("Histogram of", var)) +
theme_minimal() +
xlab(var) +
ylab("Frequency")
print(p)
library(naniar)
library(naniar)
install.packages("naniar")
library(naniar)
vis_miss(immatriculation)
library(naniar)
library(naniar)
vis_miss(immatriculation)
vis_miss(immatriculation)
vis_miss(immatriculation)
vis_miss(immatriculation)
